
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async closeSplashscreen() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("close_splashscreen") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async findFidePlayer(player: string) : Promise<Result<FidePlayer | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("find_fide_player", { player }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getBestMoves(id: string, engine: string, tab: string, goMode: GoMode, options: EngineOptions) : Promise<Result<[number, BestMoves[]] | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_best_moves", { id, engine, tab, goMode, options }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async analyzeGame(id: string, engine: string, goMode: GoMode, options: AnalysisOptions, uciOptions: EngineOption[]) : Promise<Result<MoveAnalysis[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("analyze_game", { id, engine, goMode, options, uciOptions }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopEngine(engine: string, tab: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("stop_engine", { engine, tab }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async killEngine(engine: string, tab: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("kill_engine", { engine, tab }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async killEngines(tab: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("kill_engines", { tab }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getEngineLogs(engine: string, tab: string) : Promise<Result<EngineLog[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_engine_logs", { engine, tab }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async memorySize() : Promise<number> {
    return await TAURI_INVOKE("memory_size");
},
async getPuzzle(file: string, minRating: number, maxRating: number) : Promise<Result<Puzzle, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_puzzle", { file, minRating, maxRating }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async searchOpeningName(query: string) : Promise<Result<OutOpening[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("search_opening_name", { query }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getOpeningFromFen(fen: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_opening_from_fen", { fen }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getOpeningFromName(name: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_opening_from_name", { name }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPlayersGameInfo(file: string, id: number) : Promise<Result<PlayerGameInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_players_game_info", { file, id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getEngineConfig(path: string) : Promise<Result<EngineConfig, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_engine_config", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async fileExists(path: string) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("file_exists", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getFileMetadata(path: string) : Promise<Result<FileMetadata, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_file_metadata", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async mergePlayers(file: string, player1: number, player2: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("merge_players", { file, player1, player2 }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async convertPgn(file: string, dbPath: string, timestamp: number | null, title: string, description: string | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("convert_pgn", { file, dbPath, timestamp, title, description }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPlayer(file: string, id: number) : Promise<Result<Player | null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_player", { file, id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async countPgnGames(file: string) : Promise<Result<number, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("count_pgn_games", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async readGames(file: string, start: number, end: number) : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("read_games", { file, start, end }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async lexPgn(pgn: string) : Promise<Result<Token[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("lex_pgn", { pgn }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isBmi2Compatible() : Promise<boolean> {
    return await TAURI_INVOKE("is_bmi2_compatible");
},
async deleteGame(file: string, n: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_game", { file, n }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteDuplicatedGames(file: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_duplicated_games", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteEmptyGames(file: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_empty_games", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clearGames() : Promise<void> {
    await TAURI_INVOKE("clear_games");
},
async setFileAsExecutable(path: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_file_as_executable", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteIndexes(file: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_indexes", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async createIndexes(file: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_indexes", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async editDbInfo(file: string, title: string | null, description: string | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("edit_db_info", { file, title, description }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteDbGame(file: string, gameId: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_db_game", { file, gameId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteDatabase(file: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_database", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async exportToPgn(file: string, destFile: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("export_to_pgn", { file, destFile }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async authenticate(username: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("authenticate", { username }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async writeGame(file: string, n: number, pgn: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("write_game", { file, n, pgn }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadFideDb() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_fide_db") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async downloadFile(id: string, url: string, path: string, token: string | null, finalize: boolean | null, totalSize: number | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("download_file", { id, url, path, token, finalize, totalSize }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getTournaments(file: string, query: TournamentQuery) : Promise<Result<QueryResponse<Event[]>, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_tournaments", { file, query }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getDbInfo(file: string) : Promise<Result<DatabaseInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_db_info", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getGames(file: string, query: GameQueryJs) : Promise<Result<QueryResponse<NormalizedGame[]>, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_games", { file, query }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async searchPosition(file: string, query: GameQueryJs, tabId: string) : Promise<Result<[PositionStats[], NormalizedGame[]], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("search_position", { file, query, tabId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPlayers(file: string, query: PlayerQuery) : Promise<Result<QueryResponse<Player[]>, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_players", { file, query }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getPuzzleDbInfo(file: string) : Promise<Result<PuzzleDatabaseInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_puzzle_db_info", { file }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
bestMovesPayload: BestMovesPayload,
databaseProgress: DatabaseProgress,
downloadProgress: DownloadProgress,
reportProgress: ReportProgress
}>({
bestMovesPayload: "best-moves-payload",
databaseProgress: "database-progress",
downloadProgress: "download-progress",
reportProgress: "report-progress"
})

/** user-defined constants **/



/** user-defined types **/

export type AnalysisOptions = { fen: string; moves: string[]; annotateNovelties: boolean; referenceDb: string | null; reversed: boolean }
export type BestMoves = { nodes: number; depth: number; score: Score; uciMoves: string[]; sanMoves: string[]; multipv: number; nps: number }
export type BestMovesPayload = { bestLines: BestMoves[]; engine: string; tab: string; fen: string; moves: string[]; progress: number }
export type DatabaseInfo = { title: string; description: string; player_count: number; event_count: number; game_count: number; storage_size: number; filename: string; indexed: boolean }
export type DatabaseProgress = { id: string; progress: number }
export type DownloadProgress = { progress: number; id: string; finished: boolean }
export type EngineConfig = { name: string; options: UciOptionConfig[] }
export type EngineLog = { type: "gui"; value: string } | { type: "engine"; value: string }
export type EngineOption = { name: string; value: string }
export type EngineOptions = { fen: string; moves: string[]; extraOptions: EngineOption[] }
export type Event = { id: number; name: string | null }
export type FidePlayer = { fideid: number; name: string; country: string; sex: string; title: string | null; w_title: string | null; o_title: string | null; foa_title: string | null; rating: number | null; games: number | null; k: number | null; rapid_rating: number | null; rapid_games: number | null; rapid_k: number | null; blitz_rating: number | null; blitz_games: number | null; blitz_k: number | null; birthday: number | null; flag: string | null }
export type FileMetadata = { last_modified: number }
export type GameOutcome = "Won" | "Drawn" | "Lost"
export type GameQueryJs = { options?: QueryOptions<GameSort> | null; player1?: number | null; player2?: number | null; tournament_id?: number | null; start_date?: string | null; end_date?: string | null; range1?: [number, number] | null; range2?: [number, number] | null; sides?: Sides | null; outcome?: string | null; position?: PositionQueryJs | null }
export type GameSort = "id" | "date" | "whiteElo" | "blackElo" | "ply_count"
export type GoMode = { t: "PlayersTime"; c: PlayersTime } | { t: "Depth"; c: number } | { t: "Time"; c: number } | { t: "Nodes"; c: number } | { t: "Infinite" }
export type MoveAnalysis = { best: BestMoves[]; novelty: boolean; is_sacrifice: boolean }
export type NormalizedGame = { id: number; fen: string; event: string; event_id: number; site: string; site_id: number; date?: string | null; time?: string | null; round?: string | null; white: string; white_id: number; white_elo?: number | null; black: string; black_id: number; black_elo?: number | null; result: Outcome; time_control?: string | null; eco?: string | null; ply_count?: number | null; moves: string }
export type OutOpening = { name: string; fen: string }
export type Outcome = "1-0" | "0-1" | "1/2-1/2" | "*"
export type Player = { id: number; name: string | null; elo: number | null }
export type PlayerGameInfo = { site_stats_data: SiteStatsData[] }
export type PlayerQuery = { options: QueryOptions<PlayerSort>; name?: string | null; range?: [number, number] | null }
export type PlayerSort = "id" | "name" | "elo"
export type PlayersTime = { white: number; black: number; winc: number; binc: number }
export type PositionQueryJs = { fen: string; type_: string }
export type PositionStats = { move: string; white: number; draw: number; black: number }
export type Puzzle = { id: number; fen: string; moves: string; rating: number; rating_deviation: number; popularity: number; nb_plays: number }
export type PuzzleDatabaseInfo = { title: string; description: string; puzzleCount: number; storageSize: number; path: string }
export type QueryOptions<SortT> = { skipCount: boolean; page?: number | null; pageSize?: number | null; sort: SortT; direction: SortDirection }
export type QueryResponse<T> = { data: T; count: number | null }
export type ReportProgress = { progress: number; id: string; finished: boolean }
export type Score = { value: ScoreValue; 
/**
 * The probability of each result (win, draw, loss).
 */
wdl: [number, number, number] | null }
export type ScoreValue = 
/**
 * The score in centipawns.
 */
{ type: "cp"; value: number } | 
/**
 * Mate coming up in this many moves. Negative value means the engine is getting mated.
 */
{ type: "mate"; value: number }
export type Sides = "BlackWhite" | "WhiteBlack" | "Any"
export type SiteStatsData = { site: string; player: string; data: StatsData[] }
export type SortDirection = "asc" | "desc"
export type StatsData = { date: string; is_player_white: boolean; player_elo: number; result: GameOutcome; time_control: string; opening: string }
export type Token = { type: "ParenOpen" } | { type: "ParenClose" } | { type: "Comment"; value: string } | { type: "San"; value: string } | { type: "Header"; value: { tag: string; value: string } } | { type: "Nag"; value: string } | { type: "Outcome"; value: string }
export type TournamentQuery = { options: QueryOptions<TournamentSort>; name: string | null }
export type TournamentSort = "id" | "name"
/**
 * Represents a UCI option definition.
 */
export type UciOptionConfig = 
/**
 * The option of type `check` (a boolean).
 */
{ type: "check"; value: { 
/**
 * The name of the option.
 */
name: string; 
/**
 * The default value of this `bool` property.
 */
default: boolean | null } } | 
/**
 * The option of type `spin` (a signed integer).
 */
{ type: "spin"; value: { 
/**
 * The name of the option.
 */
name: string; 
/**
 * The default value of this integer property.
 */
default: bigint | null; 
/**
 * The minimal value of this integer property.
 */
min: bigint | null; 
/**
 * The maximal value of this integer property.
 */
max: bigint | null } } | 
/**
 * The option of type `combo` (a list of strings).
 */
{ type: "combo"; value: { 
/**
 * The name of the option.
 */
name: string; 
/**
 * The default value for this list of strings.
 */
default: string | null; 
/**
 * The list of acceptable strings.
 */
var: string[] } } | 
/**
 * The option of type `button` (an action).
 */
{ type: "button"; value: { 
/**
 * The name of the option.
 */
name: string } } | 
/**
 * The option of type `string` (a string, unsurprisingly).
 */
{ type: "string"; value: { 
/**
 * The name of the option.
 */
name: string; 
/**
 * The default value of this string option.
 */
default: string | null } }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
